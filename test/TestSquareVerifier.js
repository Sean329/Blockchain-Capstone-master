// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
// Test verification with incorrect proof

contract('TestVerifier', accounts => {
    describe('Verify Tx', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({
                from: accounts[0]
            });
        });

        it('Correct verification', async function () {
            const {
                proof,
                inputs
            } = require('../zokrates/code/square/proof.json');
            const verified = await this.contract.verifyTx.call(
                proof.a,
                proof.b,
                proof.c,
                inputs
            );
            assert.equal(verified, true, "Not verified correctly");
        });

        it('Verifier captures wrong input', async function () {
            const {
                proof_altered,
                inputs_altered
            } = require('../zokrates/code/square/proofAltered.json');
            await expectThrow(this.contract.verifyTx.call(
                proof_altered.a,
                proof_altered.b,
                proof_altered.c,
                inputs_altered
            ));
        })
    });
});

var expectThrow = async function (promise) {
    try {
        await promise;
    } catch (error) {
        assert.exists(error);
        return;
    }
    assert.fail('Expected an error but didnt see one!');
}
